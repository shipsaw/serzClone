Every bin begins with the letters "SERZ", followed by the bytes 00 00 01 00.

The xml Declaration is the bytes FF 43 00 0c 00 00 00

Now onto the actual content..

	serz compresses the xml document by eliminating repeated symbols.  It does this two ways: 
	1)	When reading the xml, any string that needs to be saved is put in a hash map upon first reading, with the value being a 16-bit counter that increments for each new symbol.  When the symbol key is come across in future readings, the value is substituted.  If it is the first time this symbol is seen, it is added to the map and then written as the following format:  Two bytes of \xFF indicate that this is a new symbol.  The length of the symbol follows in unsigned 32-bit format.  Finally, the ascii characters themselves are written out.
	2)	Every element's name and important attribute values also hashed to a number, but this one is 8-bit and is the line number where the line is first encountered.

Different element types.. 
	A newline is indicated by 0xFF, and depending on the following bit means several different things.  The order of the attributes is important.
	FF 50 is a line that has children, and has the optional attribute "d:id"
	The full format is: FF 50, two bytes we will cover later, 4 bytes to indicate tag name length, tag name, d:id attribute value, 4 bytes to indicate number of children
	If a ff 50 has no children, it is a closed tag with format <[tagname]/>

	FF 56 FF FF is a line that has no children, and the optional attributes are: "d:type d:precision d:alt_encoding"
	The full format is: FF FF 56 FF, 4 bytes to store tag name length, tag name, two bits to indicate whether the 
	d:id type needs to be described, or can be implied from the previous element.  

	FF FF means this is the first instance of this type, and is followed by 
	4 bytes to store the attribute d:type.  This is then followed by the attribute value, then the required bytes for the content.
	If this is not the first instance of this type, then there are two byes that describe how it is linked to the previous element, than the bytes for the content.

	FF 41 FF FF is a line that has no children, and the optional attribues are
	 "d:precision d:elementType d:numElements"  numElements is the attribute that seperates it from the FF 56. The precision is always "string" and is added automatically by the converter.
	The full formal it: FF FF 41 FF, 4 bytes to store tag name length, tag name, two that are still a mystery, than 4 content values

	FF 70 XX XX is a closing tag.  Every FF 50 increases a count of how deep we are in the document.  XX XX is a 16-bit little-endian representation of the depth 
	that we are "popping out" of

	The symbols used in the xml document are often not represented in the bin, and those that are are stored in a table so that no space is wasted 
	writing duplicate symbols.  Every new symbol is inserted into the table with an 16-bit index (which starts at 0), and any repititions in the xml
	are represented in the bin by the index

	The alt_encoding value in the xml is simply the little-endian representation of the content's 64-bit encoding


